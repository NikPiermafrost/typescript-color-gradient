{
  "result": [
    {
      "scriptId": "312",
      "url": "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 11874,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHexColor",
          "ranges": [
            {
              "startOffset": 122,
              "endOffset": 188,
              "count": 260
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateHex",
          "ranges": [
            {
              "startOffset": 189,
              "endOffset": 509,
              "count": 390
            },
            {
              "startOffset": 451,
              "endOffset": 481,
              "count": 60
            },
            {
              "startOffset": 482,
              "endOffset": 506,
              "count": 330
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getColor",
          "ranges": [
            {
              "startOffset": 510,
              "endOffset": 1029,
              "count": 130
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateGradientColor",
          "ranges": [
            {
              "startOffset": 1030,
              "endOffset": 1253,
              "count": 130
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateComplementary",
          "ranges": [
            {
              "startOffset": 1254,
              "endOffset": 1358,
              "count": 10
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isColorValid",
          "ranges": [
            {
              "startOffset": 1359,
              "endOffset": 1478,
              "count": 24
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateRandomColor",
          "ranges": [
            {
              "startOffset": 1479,
              "endOffset": 1598,
              "count": 4
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateGradient",
          "ranges": [
            {
              "startOffset": 1599,
              "endOffset": 2865,
              "count": 15
            },
            {
              "startOffset": 1703,
              "endOffset": 1724,
              "count": 14
            },
            {
              "startOffset": 1726,
              "endOffset": 1816,
              "count": 2
            },
            {
              "startOffset": 1816,
              "endOffset": 1841,
              "count": 13
            },
            {
              "startOffset": 1841,
              "endOffset": 1892,
              "count": 4
            },
            {
              "startOffset": 1892,
              "endOffset": 1922,
              "count": 13
            },
            {
              "startOffset": 1922,
              "endOffset": 2024,
              "count": 10
            },
            {
              "startOffset": 2024,
              "endOffset": 2363,
              "count": 13
            },
            {
              "startOffset": 2363,
              "endOffset": 2837,
              "count": 10
            },
            {
              "startOffset": 2551,
              "endOffset": 2554,
              "count": 8
            },
            {
              "startOffset": 2555,
              "endOffset": 2560,
              "count": 2
            },
            {
              "startOffset": 2605,
              "endOffset": 2614,
              "count": 6
            },
            {
              "startOffset": 2615,
              "endOffset": 2620,
              "count": 4
            },
            {
              "startOffset": 2685,
              "endOffset": 2831,
              "count": 130
            },
            {
              "startOffset": 2837,
              "endOffset": 2864,
              "count": 8
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 2044,
              "endOffset": 2162,
              "count": 24
            },
            {
              "startOffset": 2089,
              "endOffset": 2156,
              "count": 5
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  ],
  "timestamp": 1071.78304,
  "source-map-cache": {
    "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts": {
      "lineLengths": [
        13,
        62,
        44,
        29,
        34,
        1,
        54,
        41,
        37,
        100,
        82,
        1,
        61,
        46,
        46,
        46,
        42,
        42,
        42,
        17,
        55,
        55,
        55,
        1,
        74,
        45,
        41,
        58,
        1,
        39,
        62,
        1,
        30,
        48,
        37,
        1,
        32,
        84,
        1,
        61,
        66,
        82,
        5,
        25,
        43,
        5,
        30,
        39,
        54,
        5,
        29,
        35,
        55,
        9,
        7,
        52,
        70,
        25,
        49,
        37,
        39,
        34,
        40,
        42,
        59,
        64,
        106,
        27,
        9,
        5,
        25,
        1,
        9008
      ],
      "data": {
        "version": 3,
        "file": "/home/nick/repos/personal/typescript-color-gradient/src/index.ts",
        "sources": [
          "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "function getHexColor(color: string): string {\n  return color.replace('#', '');\n}\n\nfunction generateHex(midPoint: number, start: string, end: string, min: number, max: number): string {\n  const startInt = parseInt(start, 16);\n  const endInt = parseInt(end, 16);\n\n  const finalBase = Math.round(\n    ((endInt - startInt) / (max - min)) * (midPoint - min) + startInt\n  );\n\n  return finalBase < 16 ? '0' + finalBase.toString(16) : finalBase.toString(16);\n}\n\nfunction getColor(midPoint: number, startColor: string, endColor: string, min: number, max: number): string {\n  const startR = startColor.substring(0, 2);\n  const startG = startColor.substring(2, 4);\n  const startB = startColor.substring(4, 6);\n\n  const endR = endColor.substring(0, 2);\n  const endG = endColor.substring(2, 4);\n  const endB = endColor.substring(4, 6);\n\n  return (\n    '#' +\n    generateHex(midPoint, startR, endR, min, max) +\n    generateHex(midPoint, startG, endG, min, max) +\n    generateHex(midPoint, startB, endB, min, max)\n  );\n}\n\nfunction generateGradientColor(midPoint: number, startColor: string, endColor: string, min: number, max: number): string {\n  const startHex = getHexColor(startColor);\n  const endHex = getHexColor(endColor);\n  return getColor(midPoint, startHex, endHex, min, max);\n}\n\nfunction generateComplementary(color: string): string {\n  return `#${color.slice(-6).split('').reverse().join('')}`;\n}\n\nfunction isColorValid(color: string): boolean {\n  const hexColorRegex = /^#([0-9A-Fa-f]{6})$/;\n  return hexColorRegex.test(color);\n}\n\nfunction generateRandomColor(): string {\n  return `#${Math.floor(Math.random() * 0xFFFFFF).toString(16).padStart(6, '0')}`;\n}\n\nfunction generateGradient(colors: string[] = [], numberOfColors: number = 10): string[] {\n  if (!Number.isInteger(numberOfColors) || numberOfColors < 0) {\n    throw new RangeError('Number of colors should be a non-negative integer');\n  }\n\n  if (!colors.length) {\n    colors.push(generateRandomColor());\n  }\n\n  if (colors.length === 1) {\n    const onlyColor = colors.at(0);\n    colors.push(generateComplementary(onlyColor!));\n  }\n\n  colors.forEach(color => {\n    if (!isColorValid(color)) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n  });\n\n  const gradientArray: string[] = new Array(numberOfColors);\n  const increment = Math.ceil(numberOfColors / (colors.length - 1));\n  let currentIndex = 0;\n\n  for (let i = 0; i < colors.length - 1; i++) {\n    const startColor = colors[i]!;\n    const endColor = colors[i + 1]!;\n    const min = increment * i;\n    const max = increment * (i + 1);\n\n    const start = min === 0 ? 1 : min;\n    const end = max === numberOfColors ? max + 1 : max;\n\n    for (let midPoint = start; midPoint < end; midPoint++) {\n      gradientArray[currentIndex] = generateGradientColor(midPoint, startColor, endColor, min, max )  ;\n      currentIndex++;\n    }\n  }\n\n  return gradientArray;\n}\n\nexport { generateGradient };"
        ],
        "sourceRoot": ""
      }
    }
  }
}
