{
  "result": [
    {
      "scriptId": "688",
      "url": "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 39453,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "cov_1sltxevya8",
          "ranges": [
            {
              "startOffset": 13,
              "endOffset": 13851,
              "count": 1
            },
            {
              "startOffset": 13669,
              "endOffset": 13697,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "cov_1sltxevya8",
          "ranges": [
            {
              "startOffset": 13792,
              "endOffset": 13826,
              "count": 5183
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHexColor",
          "ranges": [
            {
              "startOffset": 14015,
              "endOffset": 14121,
              "count": 260
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateHex",
          "ranges": [
            {
              "startOffset": 14121,
              "endOffset": 14569,
              "count": 390
            },
            {
              "startOffset": 14459,
              "endOffset": 14515,
              "count": 69
            },
            {
              "startOffset": 14515,
              "endOffset": 14567,
              "count": 321
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getColor",
          "ranges": [
            {
              "startOffset": 14569,
              "endOffset": 15192,
              "count": 130
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateGradientColor",
          "ranges": [
            {
              "startOffset": 15192,
              "endOffset": 15489,
              "count": 130
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateComplementary",
          "ranges": [
            {
              "startOffset": 15489,
              "endOffset": 15634,
              "count": 10
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isColorValid",
          "ranges": [
            {
              "startOffset": 15634,
              "endOffset": 15815,
              "count": 24
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateRandomColor",
          "ranges": [
            {
              "startOffset": 15815,
              "endOffset": 15972,
              "count": 4
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateGradient",
          "ranges": [
            {
              "startOffset": 15972,
              "endOffset": 18104,
              "count": 15
            },
            {
              "startOffset": 16199,
              "endOffset": 16246,
              "count": 14
            },
            {
              "startOffset": 16247,
              "endOffset": 16375,
              "count": 2
            },
            {
              "startOffset": 16375,
              "endOffset": 16451,
              "count": 13
            },
            {
              "startOffset": 16451,
              "endOffset": 16540,
              "count": 4
            },
            {
              "startOffset": 16540,
              "endOffset": 16573,
              "count": 9
            },
            {
              "startOffset": 16573,
              "endOffset": 16619,
              "count": 13
            },
            {
              "startOffset": 16619,
              "endOffset": 16775,
              "count": 10
            },
            {
              "startOffset": 16775,
              "endOffset": 16808,
              "count": 3
            },
            {
              "startOffset": 16808,
              "endOffset": 17354,
              "count": 13
            },
            {
              "startOffset": 17354,
              "endOffset": 18057,
              "count": 10
            },
            {
              "startOffset": 17610,
              "endOffset": 17641,
              "count": 8
            },
            {
              "startOffset": 17641,
              "endOffset": 17674,
              "count": 2
            },
            {
              "startOffset": 17732,
              "endOffset": 17767,
              "count": 6
            },
            {
              "startOffset": 17767,
              "endOffset": 17800,
              "count": 4
            },
            {
              "startOffset": 17901,
              "endOffset": 18056,
              "count": 130
            },
            {
              "startOffset": 18057,
              "endOffset": 18103,
              "count": 8
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 16848,
              "endOffset": 17060,
              "count": 24
            },
            {
              "startOffset": 16929,
              "endOffset": 17026,
              "count": 5
            },
            {
              "startOffset": 17026,
              "endOffset": 17059,
              "count": 19
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  ],
  "timestamp": 30578.947444,
  "source-map-cache": {
    "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts": {
      "lineLengths": [
        13776,
        13335,
        12340
      ],
      "data": {
        "version": 3,
        "names": [
          "cov_1sltxevya8",
          "actualCoverage",
          "s",
          "exports",
          "generateGradient",
          "getHexColor",
          "color",
          "f",
          "replace",
          "generateHex",
          "midPoint",
          "start",
          "end",
          "min",
          "max",
          "startInt",
          "parseInt",
          "endInt",
          "finalBase",
          "Math",
          "round",
          "b",
          "toString",
          "getColor",
          "startColor",
          "endColor",
          "startR",
          "substring",
          "startG",
          "startB",
          "endR",
          "endG",
          "endB",
          "generateGradientColor",
          "startHex",
          "endHex",
          "generateComplementary",
          "slice",
          "split",
          "reverse",
          "join",
          "isColorValid",
          "hexColorRegex",
          "test",
          "generateRandomColor",
          "floor",
          "random",
          "padStart",
          "colors",
          "numberOfColors",
          "Number",
          "isInteger",
          "RangeError",
          "length",
          "push",
          "onlyColor",
          "at",
          "forEach",
          "Error",
          "gradientArray",
          "Array",
          "increment",
          "ceil",
          "currentIndex",
          "i"
        ],
        "sources": [
          "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts"
        ],
        "sourcesContent": [
          "function getHexColor(color: string): string {\n  return color.replace('#', '');\n}\n\nfunction generateHex(midPoint: number, start: string, end: string, min: number, max: number): string {\n  const startInt = parseInt(start, 16);\n  const endInt = parseInt(end, 16);\n\n  const finalBase = Math.round(\n    ((endInt - startInt) / (max - min)) * (midPoint - min) + startInt\n  );\n\n  return finalBase < 16 ? '0' + finalBase.toString(16) : finalBase.toString(16);\n}\n\nfunction getColor(midPoint: number, startColor: string, endColor: string, min: number, max: number): string {\n  const startR = startColor.substring(0, 2);\n  const startG = startColor.substring(2, 4);\n  const startB = startColor.substring(4, 6);\n\n  const endR = endColor.substring(0, 2);\n  const endG = endColor.substring(2, 4);\n  const endB = endColor.substring(4, 6);\n\n  return (\n    '#' +\n    generateHex(midPoint, startR, endR, min, max) +\n    generateHex(midPoint, startG, endG, min, max) +\n    generateHex(midPoint, startB, endB, min, max)\n  );\n}\n\nfunction generateGradientColor(midPoint: number, startColor: string, endColor: string, min: number, max: number): string {\n  const startHex = getHexColor(startColor);\n  const endHex = getHexColor(endColor);\n  return getColor(midPoint, startHex, endHex, min, max);\n}\n\nfunction generateComplementary(color: string): string {\n  return `#${color.slice(-6).split('').reverse().join('')}`;\n}\n\nfunction isColorValid(color: string): boolean {\n  const hexColorRegex = /^#([0-9A-Fa-f]{6})$/;\n  return hexColorRegex.test(color);\n}\n\nfunction generateRandomColor(): string {\n  return `#${Math.floor(Math.random() * 0xFFFFFF).toString(16).padStart(6, '0')}`;\n}\n\nfunction generateGradient(colors: string[] = [], numberOfColors: number = 10): string[] {\n  if (!Number.isInteger(numberOfColors) || numberOfColors < 0) {\n    throw new RangeError('Number of colors should be a non-negative integer');\n  }\n\n  if (!colors.length) {\n    colors.push(generateRandomColor());\n  }\n\n  if (colors.length === 1) {\n    const onlyColor = colors.at(0);\n    colors.push(generateComplementary(onlyColor!));\n  }\n\n  colors.forEach(color => {\n    if (!isColorValid(color)) {\n      throw new Error(`Invalid color: ${color}`);\n    }\n  });\n\n  const gradientArray: string[] = new Array(numberOfColors);\n  const increment = Math.ceil(numberOfColors / (colors.length - 1));\n  let currentIndex = 0;\n\n  for (let i = 0; i < colors.length - 1; i++) {\n    const startColor = colors[i]!;\n    const endColor = colors[i + 1]!;\n    const min = increment * i;\n    const max = increment * (i + 1);\n\n    const start = min === 0 ? 1 : min;\n    const end = max === numberOfColors ? max + 1 : max;\n\n    for (let midPoint = start; midPoint < end; midPoint++) {\n      gradientArray[currentIndex] = generateGradientColor(midPoint, startColor, endColor, min, max )  ;\n      currentIndex++;\n    }\n  }\n\n  return gradientArray;\n}\n\nexport { generateGradient };"
        ],
        "mappings": "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",
        "ignoreList": [],
        "sourceRoot": ""
      }
    }
  }
}
