{
  "result": [
    {
      "scriptId": "314",
      "url": "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts",
      "functions": [
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 0,
              "endOffset": 22675,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [
            {
              "startOffset": 104,
              "endOffset": 1445,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "GradientColor",
          "ranges": [
            {
              "startOffset": 184,
              "endOffset": 314,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setGradient",
          "ranges": [
            {
              "startOffset": 319,
              "endOffset": 468,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getHexColor",
          "ranges": [
            {
              "startOffset": 473,
              "endOffset": 552,
              "count": 50
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setMidpoint",
          "ranges": [
            {
              "startOffset": 557,
              "endOffset": 664,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getColor",
          "ranges": [
            {
              "startOffset": 669,
              "endOffset": 1044,
              "count": 101
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateHex",
          "ranges": [
            {
              "startOffset": 1049,
              "endOffset": 1443,
              "count": 303
            },
            {
              "startOffset": 1338,
              "endOffset": 1398,
              "count": 81
            },
            {
              "startOffset": 1398,
              "endOffset": 1442,
              "count": 222
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "<instance_members_initializer>",
          "ranges": [
            {
              "startOffset": 1446,
              "endOffset": 6021,
              "count": 19
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "Gradient",
          "ranges": [
            {
              "startOffset": 1521,
              "endOffset": 1694,
              "count": 19
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setGradient",
          "ranges": [
            {
              "startOffset": 1902,
              "endOffset": 1997,
              "count": 27
            },
            {
              "startOffset": 1963,
              "endOffset": 1968,
              "count": 0
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getColors",
          "ranges": [
            {
              "startOffset": 2131,
              "endOffset": 2776,
              "count": 8
            },
            {
              "startOffset": 2446,
              "endOffset": 2473,
              "count": 0
            },
            {
              "startOffset": 2578,
              "endOffset": 2605,
              "count": 0
            },
            {
              "startOffset": 2653,
              "endOffset": 2730,
              "count": 100
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "getColor",
          "ranges": [
            {
              "startOffset": 2981,
              "endOffset": 3639,
              "count": 5
            },
            {
              "startOffset": 3037,
              "endOffset": 3109,
              "count": 2
            },
            {
              "startOffset": 3109,
              "endOffset": 3139,
              "count": 3
            },
            {
              "startOffset": 3139,
              "endOffset": 3227,
              "count": 1
            },
            {
              "startOffset": 3227,
              "endOffset": 3274,
              "count": 2
            },
            {
              "startOffset": 3274,
              "endOffset": 3638,
              "count": 1
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setNumberOfColors",
          "ranges": [
            {
              "startOffset": 3856,
              "endOffset": 4209,
              "count": 4
            },
            {
              "startOffset": 3917,
              "endOffset": 3993,
              "count": 1
            },
            {
              "startOffset": 3993,
              "endOffset": 4021,
              "count": 3
            },
            {
              "startOffset": 4021,
              "endOffset": 4112,
              "count": 1
            },
            {
              "startOffset": 4112,
              "endOffset": 4208,
              "count": 2
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "setColors",
          "ranges": [
            {
              "startOffset": 4214,
              "endOffset": 5529,
              "count": 29
            },
            {
              "startOffset": 4262,
              "endOffset": 4326,
              "count": 19
            },
            {
              "startOffset": 4360,
              "endOffset": 4471,
              "count": 25
            },
            {
              "startOffset": 4531,
              "endOffset": 4618,
              "count": 4
            },
            {
              "startOffset": 4618,
              "endOffset": 5080,
              "count": 25
            },
            {
              "startOffset": 5080,
              "endOffset": 5493,
              "count": 0
            },
            {
              "startOffset": 5493,
              "endOffset": 5528,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "",
          "ranges": [
            {
              "startOffset": 4496,
              "endOffset": 4528,
              "count": 54
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateComplementary",
          "ranges": [
            {
              "startOffset": 5534,
              "endOffset": 5653,
              "count": 25
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "generateRandomColor",
          "ranges": [
            {
              "startOffset": 5658,
              "endOffset": 5776,
              "count": 19
            }
          ],
          "isBlockCoverage": true
        },
        {
          "functionName": "isInvalid",
          "ranges": [
            {
              "startOffset": 5781,
              "endOffset": 6019,
              "count": 54
            },
            {
              "startOffset": 5885,
              "endOffset": 5905,
              "count": 52
            },
            {
              "startOffset": 5918,
              "endOffset": 5978,
              "count": 52
            },
            {
              "startOffset": 5991,
              "endOffset": 6012,
              "count": 51
            }
          ],
          "isBlockCoverage": true
        }
      ]
    }
  ],
  "timestamp": 2553.641385,
  "source-map-cache": {
    "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts": {
      "lineLengths": [
        13,
        62,
        26,
        21,
        15,
        13,
        11,
        11,
        19,
        29,
        27,
        24,
        25,
        5,
        39,
        55,
        51,
        5,
        24,
        52,
        5,
        39,
        32,
        32,
        5,
        27,
        21,
        107,
        107,
        107,
        5,
        42,
        35,
        35,
        149,
        29,
        48,
        9,
        38,
        5,
        1,
        16,
        14,
        11,
        11,
        14,
        19,
        28,
        25,
        25,
        28,
        41,
        5,
        7,
        50,
        87,
        47,
        7,
        31,
        40,
        20,
        5,
        7,
        50,
        61,
        7,
        17,
        33,
        41,
        41,
        35,
        52,
        42,
        79,
        49,
        36,
        44,
        47,
        61,
        13,
        9,
        29,
        5,
        7,
        50,
        64,
        67,
        7,
        27,
        33,
        60,
        9,
        30,
        76,
        9,
        47,
        79,
        9,
        41,
        62,
        105,
        56,
        5,
        7,
        50,
        96,
        47,
        7,
        34,
        31,
        64,
        9,
        28,
        79,
        9,
        32,
        36,
        20,
        5,
        23,
        29,
        52,
        9,
        34,
        37,
        61,
        9,
        60,
        75,
        9,
        62,
        50,
        24,
        32,
        56,
        48,
        41,
        27,
        22,
        21,
        15,
        53,
        54,
        40,
        46,
        64,
        52,
        46,
        33,
        22,
        21,
        14,
        9,
        29,
        5,
        42,
        74,
        5,
        27,
        88,
        5,
        22,
        39,
        32,
        32,
        72,
        34,
        5,
        1,
        28,
        16624
      ],
      "data": {
        "version": 3,
        "file": "/home/nick/repos/personal/typescript-color-gradient/src/index.ts",
        "sources": [
          "file:///home/nick/repos/personal/typescript-color-gradient/src/index.ts"
        ],
        "names": [],
        "mappings": "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",
        "sourcesContent": [
          "interface Limits {\n  upper: number,\n  lower: number\n}\n\nclass GradientColor {\n\n  private startColor: string;\n  private endColor: string;\n  private minNum: number;\n  private maxNum: number;\n\n  constructor() {\n    this.startColor = '';\n    this.endColor = '';\n    this.minNum = 0;\n    this.maxNum = 10;\n  }\n\n  setGradient(colorStart: string, colorEnd: string) {\n    this.startColor = this.getHexColor(colorStart);\n    this.endColor = this.getHexColor(colorEnd);\n  }\n\n  getHexColor(color: string) {\n    return color.split('#').splice(-1).join('');\n  }\n\n  setMidpoint(minNumber: number, maxNumber: number) {\n    this.minNum = minNumber;\n    this.maxNum = maxNumber;\n  }\n\n  getColor(numberValue: number): string {\n    return (\n      '#' +\n      this.generateHex(\n        numberValue,\n        this.startColor.substring(0, 2),\n        this.endColor.substring(0, 2)\n      ) +\n      this.generateHex(\n        numberValue,\n        this.startColor.substring(2, 4),\n        this.endColor.substring(2, 4)\n      ) +\n      this.generateHex(\n        numberValue,\n        this.startColor.substring(4, 6),\n        this.endColor.substring(4, 6)\n      )\n    );\n  }\n\n  generateHex(numberValue: number, start: string, end: string) {\n    const minNum = this.minNum;\n    const maxNum = this.maxNum;\n    const finalBase = Math.round(\n      ((parseInt(end, 16) - parseInt(start, 16)) / (maxNum - minNum)) * (numberValue - minNum) + parseInt(start, 16)\n    );\n\n    if (finalBase < 16) {\n      return '0' + finalBase.toString(16);\n    }\n    return finalBase.toString(16);\n  }\n}\n\nclass Gradient {\n  private gradients: GradientColor[];\n  private maxNum: number;\n  private colors: string[];\n  private intervals: Limits[];\n\n  constructor() {\n    this.gradients = [];\n    this.maxNum = 10;\n    this.colors = [];\n    this.intervals = [];\n    this.setGradient(...this.colors);\n  }\n  /**\n   * sets all the colors to generate a gradient.\n   * @param {string[]} gradients the hex colors from which the gradient is generated.\n   * @returns {Gradient} for method chaining.\n   */\n  setGradient(...gradients: string[]): Gradient {\n    this.setColors(gradients || []);\n    return this;\n  }\n\n  /**\n   * sets all the colors to generate a gradient.\n   * @returns {string[]} the array of generated hex colors.\n   */\n  getColors(): string[] {\n    const gradientArray: string[] = [];\n\n    const intervals = this.intervals;\n    const gradients = this.gradients;\n    const maxNum = this.maxNum;\n\n    for (let j = 0; j < intervals.length; j++) {\n      const interval = intervals[j];\n      const start = interval!.lower === 0 ? 1 : Math.ceil(interval!.lower);\n      const end =\n        interval!.upper === maxNum\n          ? interval!.upper + 1\n          : Math.ceil(interval!.upper);\n      for (let i = start; i < end; i++) {\n        gradientArray.push(gradients[j]!.getColor(i));\n      }\n    }\n\n    return gradientArray;\n  }\n\n  /**\n   * sets all the colors to generate a gradient.\n   * @param {number} numberValue the index of the color array.\n   * @returns {string} the desired color from the gradient array.\n   */\n  getColor(numberValue: number): string {\n    if (isNaN(numberValue)) {\n      throw new TypeError('value should be a number');\n    }\n    if (numberValue < 0) {\n      throw new RangeError('value should be greater or equal than 0');\n    }\n    if (numberValue > this.colors.length) {\n      throw new RangeError(`value should be lesser than ${this.maxNum}`);\n    }\n    const toInsert = numberValue + 1;\n    const segment = (this.maxNum) / this.gradients.length;\n    const index = Math.min(\n      Math.floor((Math.max(toInsert, 0)) / segment),\n      this.gradients.length - 1\n    );\n    return this.gradients[index]!.getColor(toInsert);\n  }\n\n  /**\n   * sets all the colors to generate a gradient.\n   * @param {number} maxNumber The number of colors generated from the gradient. Default is 10\n   * @returns {Gradient} for method chaining.\n   */\n  setNumberOfColors(maxNumber: number): Gradient {\n    if (isNaN(maxNumber)) {\n      throw new RangeError('midPoint should be a number');\n    }\n    if (maxNumber < 0) {\n      throw new RangeError('midPoint should be greater or equal than 0');\n    }\n    this.maxNum = maxNumber;\n    this.setColors(this.colors);\n    return this;\n  }\n\n  private setColors(colors: string[]): void {\n\n    if (!colors.length) {\n      colors.push(this.generateRandomColor());\n    }\n\n    if (colors.length === 1) {\n      const [onlyOne] = colors;\n      colors.push(this.generateComplementary(onlyOne!));\n    }\n\n    if (colors.some((color) => this.isInvalid(color))) {\n      throw new Error('All colors must be defined and/or not empty');\n    }\n\n    const increment = (this.maxNum) / (colors.length - 1);\n    const firstGradient = new GradientColor();\n    const lower = 0;\n    const upper = increment;\n\n    firstGradient.setGradient(colors[0]!, colors[1]!);\n    firstGradient.setMidpoint(lower, upper);\n\n    this.gradients = [firstGradient];\n    this.intervals = [{\n      lower,\n      upper\n    }];\n\n    for (let i = 1; i < colors.length - 1; i++) {\n      const gradientColor = new GradientColor();\n      const lower = increment * i;\n      const upper = increment * (i + 1);\n      gradientColor.setGradient(colors[i]!, colors[i + 1]!);\n      gradientColor.setMidpoint(lower, upper);\n      this.gradients[i] = gradientColor;\n      this.intervals[i] = {\n        lower,\n        upper\n      };\n    }\n\n    this.colors = colors;\n  }\n\n  private generateComplementary(startingColor: string): string {\n    return `#${startingColor.slice(-6).split('').reverse().join('')}`;\n  }\n\n  private generateRandomColor(): string {\n    return `#${Math.floor(Math.random() * 0xFFFFFF).toString(16).padStart(6, '0')}`;\n  }\n\n  private isInvalid(color: string): boolean {\n    const regex = /[0-9A-Fa-f]{6}/;\n    return color?.length < 6 \n    || color?.length > 7\n    || isNaN(parseInt(color.split('#').splice(-1).join(''), 16))\n    || !regex.test(color);\n  }\n}\n\nexport {\n  Gradient\n};\n"
        ],
        "sourceRoot": ""
      }
    }
  }
}
